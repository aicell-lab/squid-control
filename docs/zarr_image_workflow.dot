digraph ZarrImageWorkflow {
    // Graph settings
    rankdir=TB;
    node [shape=box, style=filled, fillcolor=lightblue, fontsize=10, margin="0.2,0.1"];
    edge [fontsize=9];
    
    // Frontend components
    subgraph cluster_frontend {
        label="Frontend (Application)";
        style=filled;
        color=lightgrey;
        
        user [label="User Interaction", fillcolor=lightyellow];
        microscope_control [label="Microscope Control Interface"];
        position_selection [label="X/Y/Z Position Selection"];
        channel_selection [label="Channel Selection"];
        image_acquisition [label="Image Acquisition\n(exposure, intensity)"];
        request_image [label="Request Image\n(dataset_id, timestamp, channel, scale, x, y)"];
        display_image [label="Display Acquired Image"];
        
        user -> position_selection;
        user -> channel_selection;
        user -> image_acquisition;
        position_selection -> request_image;
        channel_selection -> request_image;
        image_acquisition -> request_image;
        request_image -> display_image;
        display_image -> microscope_control;
    }
    
    // Camera Simulation
    subgraph cluster_camera_sim {
        label="Camera Simulation (camera_default.py)";
        style=filled;
        color=lightgrey;
        
        send_trigger [label="send_trigger() Method"];
        get_image_from_zarr [label="get_image_from_zarr() Function"];
        direct_zarr_access [label="Direct Zarr Array Access"];
        chunk_based_access [label="Chunk-based Region Access"];
        image_processing [label="Process Image\n(exposure, intensity, blurring)"];
        
        send_trigger -> get_image_from_zarr;
        get_image_from_zarr -> direct_zarr_access [label="Try first"];
        get_image_from_zarr -> chunk_based_access [label="Fallback"];
        direct_zarr_access -> image_processing;
        chunk_based_access -> image_processing;
    }
    
    // ZarrImageManager
    subgraph cluster_zarr_manager {
        label="ZarrImageManager (artifact_manager.py)";
        style=filled;
        color=lightgrey;
        
        get_region_bytes [label="get_region_bytes()"];
        get_region_np_data [label="get_region_np_data()"];
        get_zarr_group [label="get_zarr_group()"];
        zarr_cache [label="Zarr Group Cache"];
        
        get_region_bytes -> get_region_np_data;
        get_region_np_data -> get_zarr_group;
        get_zarr_group -> zarr_cache [label="Check cache first"];
    }
    
    // Artifact Manager
    subgraph cluster_artifact_manager {
        label="SquidArtifactManager";
        style=filled;
        color=lightgrey;
        
        get_file [label="get_file()\nGet pre-signed download URL"];
        artifact_id [label="artifact_id = workspace/artifact_alias"];
    }
    
    // Zarr Storage
    subgraph cluster_zarr_storage {
        label="Zarr Storage";
        style=filled;
        color=lightgrey;
        
        fsstore [label="FSStore\n(zip::download_url)"];
        lru_cache [label="LRUStoreCache\n(Cache zarr chunks)"];
        zarr_group [label="zarr.group()"];
        zarr_array [label="scale{scale}[y:y+chunk_size, x:x+chunk_size]"];
        
        fsstore -> lru_cache;
        lru_cache -> zarr_group;
        zarr_group -> zarr_array;
    }
    
    // Health Probe
    subgraph cluster_health_probe {
        label="Service Health Probe";
        style=filled;
        color=lightgrey;
        
        is_service_healthy [label="is_service_healthy() Function"];
        check_microscope [label="Check Microscope Service"];
        check_artifact_mgr [label="Check Artifact Manager"];
        test_region_retrieval [label="Test Region Retrieval"];
        
        is_service_healthy -> check_microscope;
        is_service_healthy -> check_artifact_mgr;
        check_artifact_mgr -> test_region_retrieval;
    }
    
    // Connect the clusters
    request_image -> send_trigger;
    
    chunk_based_access -> get_region_np_data;
    direct_zarr_access -> get_zarr_group;
    
    get_zarr_group -> artifact_id -> get_file;
    get_file -> fsstore [label="Use URL to access zip file"];
    
    test_region_retrieval -> get_region_np_data;
    
    // Key data flow explanation
    data_flow1 [shape=note, fillcolor=lightyellow, label="1. User selects position, channel, and\nacquisition parameters"];
    data_flow2 [shape=note, fillcolor=lightyellow, label="2. Camera simulation triggers image\nretrieval from Zarr storage"];
    data_flow3 [shape=note, fillcolor=lightyellow, label="3. ZarrImageManager retrieves\nregion data from Zarr in zip"];
    data_flow4 [shape=note, fillcolor=lightyellow, label="4. Zarr access steps:\n- Get download URL for zip\n- Open zip via fsspec\n- Access specific region\n- Apply LRU caching for performance"];
    data_flow5 [shape=note, fillcolor=lightyellow, label="5. Image data is processed with\nexposure and intensity adjustments"];
    data_flow6 [shape=note, fillcolor=lightyellow, label="6. Health probe periodically checks\nall components are functioning"];
    
    data_flow1 -> request_image [style=invis];
    data_flow2 -> send_trigger [style=invis];
    data_flow3 -> get_region_np_data [style=invis];
    data_flow4 -> fsstore [style=invis];
    data_flow5 -> image_processing [style=invis];
    data_flow6 -> is_service_healthy [style=invis];
}