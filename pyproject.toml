[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "squid-control"
version = "0.1.0"
readme = "README.md"
description = "Squid Microscope Control Software"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    # Core scientific computing
    "numpy>=1.23,<2.0",
    "scipy>=1.10.0,<2.0",
    "pandas>=2.0.0,<3.0",
    
    # Image processing and computer vision
    "opencv-python>=4.7.0,<5.0",
    "scikit-image>=0.19.0,<1.0",
    "imageio>=2.31.0,<3.0",
    "tifffile>=2021.8.30,<2024.0.0",
    "Pillow>=9.0.0,<11.0",
    
    # Data storage and compression
    "zarr>=2.11.0,<3.0",
    "blosc>=1.11.0,<2.0",
    
    # Hardware communication
    "pyserial>=3.5,<4.0",
    "crc>=1.3.0,<2.0",
    
    # Web services and API
    "hypha-rpc>=0.20.0,<1.0",
    "flask>=3.0.0,<4.0",
    "aiohttp>=3.9.0,<4.0",
    "requests>=2.26.0,<3.0",
    
    # AI and machine learning
    "openai>=1.0.0,<2.0",
    "jax>=0.3.10,<0.5.0",
    "jaxlib>=0.3.10,<0.5.0",
    
    # Data validation and serialization
    "pydantic>=2.0.0,<3.0",
    "python-dotenv>=1.0.0,<2.0",
    
    # XML and configuration
    "lxml>=4.6.0,<6.0",
    
    # Video streaming and WebRTC
    "av>=11.0.0,<15.0",
    "aiortc>=1.5.0,<2.0",
    
    # Visualization and plotting
    "matplotlib>=3.7.0,<4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0,<8.0",
    "pytest-cov",
    "pytest-asyncio",
    "pytest-timeout",
    "qtpy>=2.4.0,<3.0",
    "PyQt5>=5.15.10,<6.0",
    "pyqtgraph>=0.13.0,<1.0",
    "appdirs>=1.4.0,<2.0",
    "numba",
    "ruff",
    "mypy",
    "pre-commit",
    "black",
    "isort",
    "flake8",
]
all = [
    "qtpy>=2.4.0,<3.0",
    "PyQt5>=5.15.10,<6.0",
    "PyQt5-tools",
    "pyqtgraph>=0.13.0,<1.0",
    "tensorrt",
]
qt = [
    "qtpy>=2.4.0,<3.0",
    "PyQt5>=5.15.10,<6.0",
    "PyQt5-tools",
    "pyqtgraph>=0.13.0,<1.0",
]
tracking = [
    "tensorrt",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/squid-control"
"Bug Tracker" = "https://github.com/yourusername/squid-control/issues"

[project.scripts]
squid-control = "squid_control.__main__:main"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["squid_control*"]
exclude = ["tests*", "scripts*"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=squid_control --cov-report=term-missing --timeout=1000 --timeout-method=thread"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
timeout = 1000
timeout_method = "thread"

[tool.coverage.run]
branch = true
source = ["squid_control"]
omit = [
    # Hardware-specific modules not used in simulation mode
    "squid_control/control/gxipy/*",
    "squid_control/control/camera/camera_flir.py",
    "squid_control/control/camera/camera_toupcam.py", 
    "squid_control/control/camera/camera_TIS.py",
    "squid_control/control/processing_handler.py",
    "squid_control/control/serial_peripherals.py",
    # AI/service modules not used in core simulation
    "squid_control/hypha_tools/chatbot/*",
    "squid_control/hypha_tools/hypha_storage.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    # Hardware-only code paths
    "if.*GX_AVAILABLE",
    "except ImportError:",
]

[tool.ruff]
line-length = 88
select = ["E", "W", "F", "I", "UP", "PL", "T20"]
ignore = ["E501"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true