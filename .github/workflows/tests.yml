name: Tests

on: push

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    container:
      image: python:3.11-slim
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y \
          libgl1 \
          libglib2.0-0 \
          git \
          gpg \
          libglu1-mesa

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]

    - name: Run unit tests
      shell: bash
      env:
        SQUID_SIMULATION_MODE: "true"
        PYTHONPATH: "."
      run: |
        echo "üß™ Running UNIT TESTS (without integration tests)"
        echo "üîß Hardware modules excluded in simulation mode"
        echo "‚ö° Fast feedback - unit tests run first"
        echo ""
        python scripts/run_tests.py --skip-integration --coverage --verbose

    - name: Upload coverage reports to Codecov
      if: always() && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage HTML report as artifact
      if: always() && matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report-unit-tests
        path: htmlcov/
        retention-days: 30

    - name: Upload unit test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: pytest-results.xml
        retention-days: 30

  integration-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    container:
      image: python:3.11-slim
    strategy:
      matrix:
        python-version: ["3.11"]
    # Run integration tests only when unit tests succeed
    if: success()

    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y \
          libgl1 \
          libglib2.0-0 \
          git \
          gpg \
          libglu1-mesa

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]

    - name: Run integration tests
      shell: bash
      env:
        SQUID_SIMULATION_MODE: "true"
        PYTHONPATH: "."
        AGENT_LENS_WORKSPACE_TOKEN: ${{ secrets.AGENT_LENS_WORKSPACE_TOKEN }}
      run: |
        echo "üåê Running INTEGRATION TESTS (Hypha RPC services, excluding WebRTC)"
        echo "üîó Requires network access and workspace token"
        echo "üìπ WebRTC tests run separately in webrtc-integration-tests job"
        echo "üí° To run locally: python scripts/run_tests.py --integration-only"
        echo ""
        python -m pytest tests/ -m "integration" --ignore=tests/test_webrtc_e2e.py --verbose --junitxml=pytest-results.xml

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-${{ matrix.python-version }}
        path: pytest-results.xml
        retention-days: 30

    - name: Run WebRTC integration tests
      shell: bash
      env:
        SQUID_SIMULATION_MODE: "true"
        PYTHONPATH: "."
        AGENT_LENS_WORKSPACE_TOKEN: ${{ secrets.AGENT_LENS_WORKSPACE_TOKEN }}
      run: |
        echo ""
        echo "üìπ Running WEBRTC INTEGRATION TESTS (Video streaming & metadata)"
        echo "üîó Requires network access and workspace token"
        echo "üåê Tests WebRTC video streaming and browser integration"
        echo "üí° To run locally: python scripts/run_tests.py --webrtc-only"
        echo ""
        python scripts/run_tests.py --webrtc-only --verbose

    - name: Upload WebRTC test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: webrtc-test-results-${{ matrix.python-version }}
        path: pytest-results.xml
        retention-days: 30

    - name: Upload WebRTC test HTML artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: webrtc-test-html-${{ matrix.python-version }}
        path: /tmp/webrtc_test*.html
        retention-days: 7
        if-no-files-found: ignore

  coverage-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()
    
    steps:
    - name: Coverage comment
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 60
        MINIMUM_ORANGE: 40
