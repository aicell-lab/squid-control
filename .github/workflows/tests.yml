name: Tests

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: python:3.10.13-slim
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          git \
          gpg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]

    - name: Debug environment variables
      shell: bash
      run: |
        echo "Checking environment variables..."
        echo "SQUID_WORKSPACE_TOKEN is set: ${{ secrets.SQUID_WORKSPACE_TOKEN != '' }}"
        echo "AGENT_LENS_WORKSPACE_TOKEN is set: ${{ secrets.AGENT_LENS_WORKSPACE_TOKEN != '' }}"
        if [ -n "$SQUID_WORKSPACE_TOKEN" ]; then
          echo "✅ SQUID_WORKSPACE_TOKEN is available in environment"
          echo "Token length: ${#SQUID_WORKSPACE_TOKEN}"
          echo "Token starts with: ${SQUID_WORKSPACE_TOKEN:0:10}..."
          echo "Token ends with: ...${SQUID_WORKSPACE_TOKEN: -10}"
          
          # Check JWT format (should have 3 parts separated by dots)
          IFS='.' read -ra TOKEN_PARTS <<< "$SQUID_WORKSPACE_TOKEN"
          echo "Token parts (should be 3 for JWT): ${#TOKEN_PARTS[@]}"
          
          # Check for common issues
          if [[ "$SQUID_WORKSPACE_TOKEN" == *$'\n'* ]]; then
            echo "⚠️  WARNING: Token contains newlines"
          fi
          if [[ "$SQUID_WORKSPACE_TOKEN" == *" "* ]]; then
            echo "⚠️  WARNING: Token contains spaces"
          fi
          
          if [ ${#TOKEN_PARTS[@]} -eq 3 ]; then
            echo "✅ Token format looks correct (JWT with 3 parts)"
          else
            echo "❌ Token format looks incorrect (not JWT format)"
          fi
        else
          echo "❌ SQUID_WORKSPACE_TOKEN is NOT available in environment"
        fi
      env:
        AGENT_LENS_WORKSPACE_TOKEN: ${{ secrets.AGENT_LENS_WORKSPACE_TOKEN }}
        SQUID_WORKSPACE_TOKEN: ${{ secrets.SQUID_WORKSPACE_TOKEN }}

    - name: Run tests with coverage
      shell: bash
      env:
        AGENT_LENS_WORKSPACE_TOKEN: ${{ secrets.AGENT_LENS_WORKSPACE_TOKEN }}
        SQUID_WORKSPACE_TOKEN: ${{ secrets.SQUID_WORKSPACE_TOKEN }}
      run: |
        if [ -n "$SQUID_WORKSPACE_TOKEN" ] || [ -n "$AGENT_LENS_WORKSPACE_TOKEN" ]; then
          echo "✅ Running all tests with integration tests enabled..."
          PYTHONPATH=. pytest \
            --cov=squid_control \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-report=term-missing \
            --junitxml=pytest-results.xml
        else
          echo "⚠️  Tokens not available, running unit tests only..."
          PYTHONPATH=. pytest \
            --cov=squid_control \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-report=term-missing \
            --junitxml=pytest-results.xml \
            tests/test_squid_controller.py tests/test_connection.py
        fi

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage HTML report as artifact
      if: matrix.python-version == '3.10'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: htmlcov/
        retention-days: 30

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: pytest-results.xml
        retention-days: 30

    - name: Coverage comment
      if: github.event_name == 'pull_request' && matrix.python-version == '3.10'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 60
        MINIMUM_ORANGE: 40
